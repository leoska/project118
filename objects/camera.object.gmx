<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Configuration
mouse_speed = 0.1;
aspect = view_wview[0] / view_hview[0];
fov = 75;
z = 0;
xt = 0;
yt = 0;
zt = 0;

zdirection = 0;
direction = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Controls
var vk_w, vk_a, vk_s, vk_d;
// Mouse Controls
if (window_has_focus())
{
    xt = x + cos(degtorad(direction)) * 128;
    yt = y + sin(degtorad(direction)) * 128;
    zt = z + tan(degtorad(zdirection)) * 128;
    
    if (mouse_check_button(mb_right))
    {
        direction += (window_mouse_get_x() - window_get_width() / 2) * mouse_speed;
        zdirection -= (window_mouse_get_y() - window_get_height() / 2) * mouse_speed; 
        // Limiting the pitch (zdirection)
        zdirection = clamp(zdirection, -85, 85);
    
        // Lock the mouse to the center of the display
        window_mouse_set(window_get_width() / 2, window_get_height() / 2);
        window_set_cursor(cr_none);
    }
    else
    {
        window_set_cursor(cr_default);
    }
}

// Keyboard Controls
vk_w = keyboard_check(ord("W"));
vk_a = keyboard_check(ord("A"));
vk_s = keyboard_check(ord("S"));
vk_d = keyboard_check(ord("D"));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Projection
d3d_set_projection_ext(x, y, z, xt, yt, zt, 0, 0, 1, fov, aspect, 0.1, 32000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
